// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscribe.Infrastructure.Context;

#nullable disable

namespace Subscribe.Infrastructure.Migrations
{
    [DbContext(typeof(SubscribeContext))]
    [Migration("20240714081456_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Subscribe.Domain.Model.CategoryAggregate", b =>
                {
                    b.Property<Guid>("CategoryAggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("category_aggregate_id");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color_code");

                    b.Property<string>("IconFilePath")
                        .HasColumnType("text")
                        .HasColumnName("icon_file_path");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.HasKey("CategoryAggregateId");

                    b.ToTable("category_aggregate", (string)null);
                });

            modelBuilder.Entity("Subscribe.Domain.Model.CategoryItem", b =>
                {
                    b.Property<long>("CategoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryItemId"));

                    b.Property<Guid>("CategoryAggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_aggregate_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryItemId");

                    b.HasIndex("CategoryAggregateId")
                        .IsUnique();

                    b.HasIndex("CategoryItemId");

                    b.ToTable("category_item", (string)null);
                });

            modelBuilder.Entity("Subscribe.Domain.Model.SubscribeAggregate.SubscribeAggregate", b =>
                {
                    b.Property<Guid>("SubscribeAggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subscribe_aggregate_id");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color_code");

                    b.Property<DateTime?>("DeleteDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_day");

                    b.Property<DateTime?>("ExpectedDateOfCancellation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_date_of_cancellation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsYear")
                        .HasColumnType("boolean")
                        .HasColumnName("is_year");

                    b.Property<DateTime>("PaymentDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_day");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_day");

                    b.Property<Guid>("_categoryAggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_aggregate_id");

                    b.Property<Guid>("_userAggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_aggregate_id");

                    b.HasKey("SubscribeAggregateId");

                    b.HasIndex("_categoryAggregateId")
                        .IsUnique();

                    b.ToTable("subscribe_aggregate", (string)null);
                });

            modelBuilder.Entity("Subscribe.Domain.Model.SubscribeAggregate.SubscribeItem", b =>
                {
                    b.Property<long>("SubscribeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("subscribe_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SubscribeItemId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("SubscribeAggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscribe_aggregate_id");

                    b.Property<string>("SubscribeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("subscribe_name");

                    b.HasKey("SubscribeItemId");

                    b.HasIndex("SubscribeAggregateId")
                        .IsUnique();

                    b.HasIndex("SubscribeItemId")
                        .IsUnique();

                    b.ToTable("subscribe_item", (string)null);
                });

            modelBuilder.Entity("Subscribe.Domain.Model.CategoryItem", b =>
                {
                    b.HasOne("Subscribe.Domain.Model.CategoryAggregate", null)
                        .WithOne("CategoryItem")
                        .HasForeignKey("Subscribe.Domain.Model.CategoryItem", "CategoryAggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribe.Domain.Model.SubscribeAggregate.SubscribeAggregate", b =>
                {
                    b.HasOne("Subscribe.Domain.Model.CategoryAggregate", null)
                        .WithOne()
                        .HasForeignKey("Subscribe.Domain.Model.SubscribeAggregate.SubscribeAggregate", "_categoryAggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribe.Domain.Model.SubscribeAggregate.SubscribeItem", b =>
                {
                    b.HasOne("Subscribe.Domain.Model.SubscribeAggregate.SubscribeAggregate", null)
                        .WithOne("SubscribeItem")
                        .HasForeignKey("Subscribe.Domain.Model.SubscribeAggregate.SubscribeItem", "SubscribeAggregateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribe.Domain.Model.CategoryAggregate", b =>
                {
                    b.Navigation("CategoryItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Subscribe.Domain.Model.SubscribeAggregate.SubscribeAggregate", b =>
                {
                    b.Navigation("SubscribeItem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
